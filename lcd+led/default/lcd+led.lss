
lcd+led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000004c8  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000071  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c01  00000000  00000000  00000609  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015c  00000000  00000000  0000120a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008fc  00000000  00000000  00001366  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010b  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000789  00000000  00000000  00001def  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e9       	ldi	r26, 0x9C	; 156
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 39       	cpi	r26, 0x9C	; 156
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  8a:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_command>:
 	lcd_command(0x28);    // 4 bit mode 2 line, 5x7 dots
 	lcd_command(0x06);    // enter mode/ auto increment mode//
	lcd_command(0x0c);    // display on cursor off
}
void lcd_command(unsigned char com)              //com=command to be used/user defined function//com=0x02
	{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	28 bb       	out	0x18, r18	; 24
	lcd = com & 0xF0;		//send higher bit/D4-D7/data pin

	lcd &= ~(1<<rs); 		//rs =0/compliment 0f 0=1/command mode
  98:	c2 98       	cbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1/en=enable,
  9a:	c3 9a       	sbi	0x18, 3	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	20 ed       	ldi	r18, 0xD0	; 208
  9e:	37 e0       	ldi	r19, 0x07	; 7
  a0:	f9 01       	movw	r30, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_command+0x10>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0/forsending higher bit
  a6:	c3 98       	cbi	0x18, 3	; 24
  a8:	f9 01       	movw	r30, r18
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_command+0x18>
	_delay_ms(1);

	lcd = (com<<4) & 0xF0;	//send lower bit
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	44 e0       	ldi	r20, 0x04	; 4
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	4a 95       	dec	r20
  b8:	e1 f7       	brne	.-8      	; 0xb2 <lcd_command+0x20>
  ba:	88 bb       	out	0x18, r24	; 24

	lcd &= ~(1<<rs); 		//rs =0
  bc:	c2 98       	cbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1
  be:	c3 9a       	sbi	0x18, 3	; 24
  c0:	c9 01       	movw	r24, r18
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_command+0x30>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
  c6:	c3 98       	cbi	0x18, 3	; 24
  c8:	c9 01       	movw	r24, r18
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_command+0x38>
	_delay_ms(1);
	}
  ce:	08 95       	ret

000000d0 <lcd_init>:
#define D6 PB6
#define D7 PB7


void lcd_init()
{
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x02);    // home position/test cursor wiill set on initial position
 	lcd_command(0x28);    // 4 bit mode 2 line, 5x7 dots
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 	lcd_command(0x06);    // enter mode/ auto increment mode//
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x0c);    // display on cursor off
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  f0:	08 95       	ret

000000f2 <lcd_data>:
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
	_delay_ms(1);
	}
void lcd_data(unsigned char value)
	{
  f2:	28 2f       	mov	r18, r24
  f4:	20 7f       	andi	r18, 0xF0	; 240
  f6:	28 bb       	out	0x18, r18	; 24

	lcd =value & 0xF0;		//send higher bit

	lcd |= (1<<rs); 		//rs =1
  f8:	c2 9a       	sbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1
  fa:	c3 9a       	sbi	0x18, 3	; 24
  fc:	20 ed       	ldi	r18, 0xD0	; 208
  fe:	37 e0       	ldi	r19, 0x07	; 7
 100:	f9 01       	movw	r30, r18
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_data+0x10>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
 106:	c3 98       	cbi	0x18, 3	; 24
 108:	f9 01       	movw	r30, r18
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_data+0x18>
	_delay_ms(1);


	lcd =(value<<4) & 0xF0;	//send lower bit
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	54 e0       	ldi	r21, 0x04	; 4
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	5a 95       	dec	r21
 118:	e1 f7       	brne	.-8      	; 0x112 <lcd_data+0x20>
 11a:	88 bb       	out	0x18, r24	; 24

	lcd |= (1<<rs); 		//rs =1
 11c:	c2 9a       	sbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1
 11e:	c3 9a       	sbi	0x18, 3	; 24
 120:	c9 01       	movw	r24, r18
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_data+0x30>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
 126:	c3 98       	cbi	0x18, 3	; 24
 128:	c9 01       	movw	r24, r18
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_data+0x38>
	_delay_ms(1);
	}
 12e:	08 95       	ret

00000130 <lcd_clear>:


void lcd_clear(void)
{
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 136:	80 ed       	ldi	r24, 0xD0	; 208
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_clear+0xa>
lcd_command(0x01);//predifined to clear lcd command
_delay_ms(1);
}
 13e:	08 95       	ret

00000140 <lcd_string>:



void lcd_string(char *str)//pointer
{
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	03 c0       	rjmp	.+6      	; 0x152 <lcd_string+0x12>
	char i=0;//length of data
	while(str[i]!='\0')//for incrimenting the data one by one untill null is found out
	{
	lcd_data(str[i]);//for incrimenting the data one by one untill null is found out
 14c:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
	i++;
 150:	1f 5f       	subi	r17, 0xFF	; 255


void lcd_string(char *str)//pointer
{
	char i=0;//length of data
	while(str[i]!='\0')//for incrimenting the data one by one untill null is found out
 152:	fe 01       	movw	r30, r28
 154:	e1 0f       	add	r30, r17
 156:	f1 1d       	adc	r31, r1
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	b9 f7       	brne	.-18     	; 0x14c <lcd_string+0xc>
	{
	lcd_data(str[i]);//for incrimenting the data one by one untill null is found out
	i++;
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	08 95       	ret

00000166 <lcd_number>:

void lcd_number(unsigned int value)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
	unsigned int d=0;
	lcd_command(0x04);	//auto decrement mode
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>

	if(value==0)
 172:	20 97       	sbiw	r28, 0x00	; 0
 174:	91 f4       	brne	.+36     	; 0x19a <lcd_number+0x34>
	lcd_data(value+48);
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
 17c:	0e c0       	rjmp	.+28     	; 0x19a <lcd_number+0x34>

	while(value!=0)
	{
	d=value%10;
	lcd_data(d+48);
 17e:	ce 01       	movw	r24, r28
 180:	6a e0       	ldi	r22, 0x0A	; 10
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	0e 94 4e 02 	call	0x49c	; 0x49c <__udivmodhi4>
 188:	80 5d       	subi	r24, 0xD0	; 208
 18a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
	value=value/10;
 18e:	ce 01       	movw	r24, r28
 190:	6a e0       	ldi	r22, 0x0A	; 10
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	0e 94 4e 02 	call	0x49c	; 0x49c <__udivmodhi4>
 198:	eb 01       	movw	r28, r22
	lcd_command(0x04);	//auto decrement mode

	if(value==0)
	lcd_data(value+48);

	while(value!=0)
 19a:	20 97       	sbiw	r28, 0x00	; 0
 19c:	81 f7       	brne	.-32     	; 0x17e <lcd_number+0x18>
	{
	d=value%10;
	lcd_data(d+48);
	value=value/10;
	}
	lcd_command(0x06);	//auto increment mode
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <main>:
#include<avr/io.h>
#define F_CPU 8000000
#include<util/delay.h>
#include<lcdavr.h>
void main()
{
 1aa:	2f 92       	push	r2
 1ac:	3f 92       	push	r3
 1ae:	4f 92       	push	r4
 1b0:	5f 92       	push	r5
 1b2:	6f 92       	push	r6
 1b4:	7f 92       	push	r7
 1b6:	8f 92       	push	r8
 1b8:	9f 92       	push	r9
 1ba:	af 92       	push	r10
 1bc:	bf 92       	push	r11
 1be:	cf 92       	push	r12
 1c0:	df 92       	push	r13
 1c2:	ef 92       	push	r14
 1c4:	ff 92       	push	r15
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
   DDRB=0xff;
 1ce:	1f ef       	ldi	r17, 0xFF	; 255
 1d0:	17 bb       	out	0x17, r17	; 23
   lcd_init();
 1d2:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_init>
   DDRC=0xff;
 1d6:	14 bb       	out	0x14, r17	; 20
   DDRA=0x00;
 1d8:	1a ba       	out	0x1a, r1	; 26
   PORTA=0b11111000;
 1da:	88 ef       	ldi	r24, 0xF8	; 248
 1dc:	8b bb       	out	0x1b, r24	; 27
 1de:	c8 ec       	ldi	r28, 0xC8	; 200
 1e0:	d0 e0       	ldi	r29, 0x00	; 0

				  if((PINA & 0b11111000)==0b10111000)  //switch 2 is closed
				  {
				        lcd_command(0x80);
						lcd_string("led alternate");
						PORTC=0b10101010;
 1e2:	5a ea       	ldi	r21, 0xAA	; 170
 1e4:	55 2e       	mov	r5, r21
						_delay_ms(100);
						PORTC=0b01010101;
 1e6:	45 e5       	ldi	r20, 0x55	; 85
 1e8:	44 2e       	mov	r4, r20
				   {
				         lcd_command(0x80);
						 lcd_string("relay led");
						 PORTC=0b10000000;
						 _delay_ms(100); 
						 PORTC=0b01000000;
 1ea:	30 e4       	ldi	r19, 0x40	; 64
 1ec:	33 2e       	mov	r3, r19
						 _delay_ms(100);
						 PORTC=0b00100000;
 1ee:	20 e2       	ldi	r18, 0x20	; 32
 1f0:	22 2e       	mov	r2, r18
						 _delay_ms(100);
						 PORTC=0b00010000;
						 _delay_ms(100);
						 PORTC=0b00001000;
 1f2:	98 e0       	ldi	r25, 0x08	; 8
 1f4:	c9 2e       	mov	r12, r25
						 _delay_ms(100);
						 PORTC=0b00000100;
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	b8 2e       	mov	r11, r24
						 _delay_ms(100);
						 PORTC=0b00000010;
 1fa:	02 e0       	ldi	r16, 0x02	; 2
 1fc:	a0 2e       	mov	r10, r16
						 _delay_ms(100); 
						 PORTC=0b00000001;
 1fe:	99 24       	eor	r9, r9
 200:	93 94       	inc	r9
						    {
                               lcd_command(0x80);
							   lcd_string("chaser led");
							   PORTC=0b10000000;
							   _delay_ms(100);
							   PORTC=0b11000000;
 202:	b0 ec       	ldi	r27, 0xC0	; 192
 204:	8b 2e       	mov	r8, r27
							   _delay_ms(100);
							   PORTC=0b11100000;
 206:	a0 ee       	ldi	r26, 0xE0	; 224
 208:	7a 2e       	mov	r7, r26
							   _delay_ms(100);
							   PORTC=0b11110000;
 20a:	f0 ef       	ldi	r31, 0xF0	; 240
 20c:	6f 2e       	mov	r6, r31
							   _delay_ms(100);
							   PORTC=0b11111000;
 20e:	e8 ef       	ldi	r30, 0xF8	; 248
 210:	fe 2e       	mov	r15, r30
							   _delay_ms(100);
							   PORTC=0b11111100;
 212:	7c ef       	ldi	r23, 0xFC	; 252
 214:	e7 2e       	mov	r14, r23
							   _delay_ms(100);
							   PORTC=0b11111110;
 216:	6e ef       	ldi	r22, 0xFE	; 254
 218:	d6 2e       	mov	r13, r22
						     {
							      lcd_command(0x80);
								  lcd_string("curtain/on/of");
								  PORTC=0xff;
								  _delay_ms(100);
								  PORTC=0b11100111;
 21a:	07 ee       	ldi	r16, 0xE7	; 231
   lcd_init();
   DDRC=0xff;
   DDRA=0x00;
   PORTA=0b11111000;
   while(1)
   {   if((PINA & 0b11111000)== 0b01111000)  //switch1 is closed
 21c:	89 b3       	in	r24, 0x19	; 25
 21e:	88 7f       	andi	r24, 0xF8	; 248
 220:	88 37       	cpi	r24, 0x78	; 120
 222:	d1 f4       	brne	.+52     	; 0x258 <main+0xae>
           { lcd_clear();
 224:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
	       lcd_command(0x80);
 228:	80 e8       	ldi	r24, 0x80	; 128
 22a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	       lcd_string("led blink");
 22e:	80 e6       	ldi	r24, 0x60	; 96
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
	         PORTC=0xff;
 236:	15 bb       	out	0x15, r17	; 21
 238:	88 ee       	ldi	r24, 0xE8	; 232
 23a:	93 e0       	ldi	r25, 0x03	; 3
 23c:	fe 01       	movw	r30, r28
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x94>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 242:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 244:	d9 f7       	brne	.-10     	; 0x23c <main+0x92>
	           _delay_ms(100);
			   PORTC=0x00;
 246:	15 ba       	out	0x15, r1	; 21
 248:	88 ee       	ldi	r24, 0xE8	; 232
 24a:	93 e0       	ldi	r25, 0x03	; 3
 24c:	fe 01       	movw	r30, r28
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <main+0xa4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 252:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 254:	d9 f7       	brne	.-10     	; 0x24c <main+0xa2>
 256:	02 c0       	rjmp	.+4      	; 0x25c <main+0xb2>
			   _delay_ms(100);
			   }
			   else 
			      lcd_clear();
 258:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
				  PORTC=0x00;
 25c:	15 ba       	out	0x15, r1	; 21

				  if((PINA & 0b11111000)==0b10111000)  //switch 2 is closed
 25e:	89 b3       	in	r24, 0x19	; 25
 260:	88 7f       	andi	r24, 0xF8	; 248
 262:	88 3b       	cpi	r24, 0xB8	; 184
 264:	c1 f4       	brne	.+48     	; 0x296 <main+0xec>
				  {
				        lcd_command(0x80);
 266:	80 e8       	ldi	r24, 0x80	; 128
 268:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
						lcd_string("led alternate");
 26c:	8a e6       	ldi	r24, 0x6A	; 106
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
						PORTC=0b10101010;
 274:	55 ba       	out	0x15, r5	; 21
 276:	88 ee       	ldi	r24, 0xE8	; 232
 278:	93 e0       	ldi	r25, 0x03	; 3
 27a:	fe 01       	movw	r30, r28
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 280:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 282:	d9 f7       	brne	.-10     	; 0x27a <main+0xd0>
						_delay_ms(100);
						PORTC=0b01010101;
 284:	45 ba       	out	0x15, r4	; 21
 286:	88 ee       	ldi	r24, 0xE8	; 232
 288:	93 e0       	ldi	r25, 0x03	; 3
 28a:	fe 01       	movw	r30, r28
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 290:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 292:	d9 f7       	brne	.-10     	; 0x28a <main+0xe0>
 294:	02 c0       	rjmp	.+4      	; 0x29a <main+0xf0>
						_delay_ms(100);
						}
						else
						  lcd_clear();
 296:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
						  PORTC=0x00;
 29a:	15 ba       	out	0x15, r1	; 21

                   if((PINA & 0b11111000)==0b11011000)  //switch 3 is closed
 29c:	89 b3       	in	r24, 0x19	; 25
 29e:	88 7f       	andi	r24, 0xF8	; 248
 2a0:	88 3d       	cpi	r24, 0xD8	; 216
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <main+0xfc>
 2a4:	4a c0       	rjmp	.+148    	; 0x33a <main+0x190>
				   {
				         lcd_command(0x80);
 2a6:	80 e8       	ldi	r24, 0x80	; 128
 2a8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
						 lcd_string("relay led");
 2ac:	88 e7       	ldi	r24, 0x78	; 120
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
						 PORTC=0b10000000;
 2b4:	80 e8       	ldi	r24, 0x80	; 128
 2b6:	85 bb       	out	0x15, r24	; 21
 2b8:	88 ee       	ldi	r24, 0xE8	; 232
 2ba:	93 e0       	ldi	r25, 0x03	; 3
 2bc:	fe 01       	movw	r30, r28
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x114>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c4:	d9 f7       	brne	.-10     	; 0x2bc <main+0x112>
						 _delay_ms(100); 
						 PORTC=0b01000000;
 2c6:	35 ba       	out	0x15, r3	; 21
 2c8:	88 ee       	ldi	r24, 0xE8	; 232
 2ca:	93 e0       	ldi	r25, 0x03	; 3
 2cc:	fe 01       	movw	r30, r28
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d4:	d9 f7       	brne	.-10     	; 0x2cc <main+0x122>
						 _delay_ms(100);
						 PORTC=0b00100000;
 2d6:	25 ba       	out	0x15, r2	; 21
 2d8:	88 ee       	ldi	r24, 0xE8	; 232
 2da:	93 e0       	ldi	r25, 0x03	; 3
 2dc:	fe 01       	movw	r30, r28
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0x134>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e4:	d9 f7       	brne	.-10     	; 0x2dc <main+0x132>
						 _delay_ms(100);
						 PORTC=0b00010000;
 2e6:	80 e1       	ldi	r24, 0x10	; 16
 2e8:	85 bb       	out	0x15, r24	; 21
 2ea:	88 ee       	ldi	r24, 0xE8	; 232
 2ec:	93 e0       	ldi	r25, 0x03	; 3
 2ee:	fe 01       	movw	r30, r28
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <main+0x146>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f6:	d9 f7       	brne	.-10     	; 0x2ee <main+0x144>
						 _delay_ms(100);
						 PORTC=0b00001000;
 2f8:	c5 ba       	out	0x15, r12	; 21
 2fa:	88 ee       	ldi	r24, 0xE8	; 232
 2fc:	93 e0       	ldi	r25, 0x03	; 3
 2fe:	fe 01       	movw	r30, r28
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <main+0x156>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 304:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 306:	d9 f7       	brne	.-10     	; 0x2fe <main+0x154>
						 _delay_ms(100);
						 PORTC=0b00000100;
 308:	b5 ba       	out	0x15, r11	; 21
 30a:	88 ee       	ldi	r24, 0xE8	; 232
 30c:	93 e0       	ldi	r25, 0x03	; 3
 30e:	fe 01       	movw	r30, r28
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 314:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 316:	d9 f7       	brne	.-10     	; 0x30e <main+0x164>
						 _delay_ms(100);
						 PORTC=0b00000010;
 318:	a5 ba       	out	0x15, r10	; 21
 31a:	88 ee       	ldi	r24, 0xE8	; 232
 31c:	93 e0       	ldi	r25, 0x03	; 3
 31e:	fe 01       	movw	r30, r28
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <main+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 324:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 326:	d9 f7       	brne	.-10     	; 0x31e <main+0x174>
						 _delay_ms(100); 
						 PORTC=0b00000001;
 328:	95 ba       	out	0x15, r9	; 21
 32a:	88 ee       	ldi	r24, 0xE8	; 232
 32c:	93 e0       	ldi	r25, 0x03	; 3
 32e:	fe 01       	movw	r30, r28
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0x186>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 334:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 336:	d9 f7       	brne	.-10     	; 0x32e <main+0x184>
 338:	02 c0       	rjmp	.+4      	; 0x33e <main+0x194>
						 _delay_ms(100);
						 }
						 
						 else
						     lcd_clear();
 33a:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
							 PORTC=0x00;
 33e:	15 ba       	out	0x15, r1	; 21

                         
						 if((PINA & 0b11111000)==0b11101000) //switch 4 is closed
 340:	89 b3       	in	r24, 0x19	; 25
 342:	88 7f       	andi	r24, 0xF8	; 248
 344:	88 3e       	cpi	r24, 0xE8	; 232
 346:	09 f0       	breq	.+2      	; 0x34a <main+0x1a0>
 348:	49 c0       	rjmp	.+146    	; 0x3dc <main+0x232>
						    {
                               lcd_command(0x80);
 34a:	80 e8       	ldi	r24, 0x80	; 128
 34c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
							   lcd_string("chaser led");
 350:	82 e8       	ldi	r24, 0x82	; 130
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
							   PORTC=0b10000000;
 358:	80 e8       	ldi	r24, 0x80	; 128
 35a:	85 bb       	out	0x15, r24	; 21
 35c:	88 ee       	ldi	r24, 0xE8	; 232
 35e:	93 e0       	ldi	r25, 0x03	; 3
 360:	fe 01       	movw	r30, r28
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <main+0x1b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 366:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 368:	d9 f7       	brne	.-10     	; 0x360 <main+0x1b6>
							   _delay_ms(100);
							   PORTC=0b11000000;
 36a:	85 ba       	out	0x15, r8	; 21
 36c:	88 ee       	ldi	r24, 0xE8	; 232
 36e:	93 e0       	ldi	r25, 0x03	; 3
 370:	fe 01       	movw	r30, r28
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <main+0x1c8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 376:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 378:	d9 f7       	brne	.-10     	; 0x370 <main+0x1c6>
							   _delay_ms(100);
							   PORTC=0b11100000;
 37a:	75 ba       	out	0x15, r7	; 21
 37c:	88 ee       	ldi	r24, 0xE8	; 232
 37e:	93 e0       	ldi	r25, 0x03	; 3
 380:	fe 01       	movw	r30, r28
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x1d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 386:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 388:	d9 f7       	brne	.-10     	; 0x380 <main+0x1d6>
							   _delay_ms(100);
							   PORTC=0b11110000;
 38a:	65 ba       	out	0x15, r6	; 21
 38c:	88 ee       	ldi	r24, 0xE8	; 232
 38e:	93 e0       	ldi	r25, 0x03	; 3
 390:	fe 01       	movw	r30, r28
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <main+0x1e8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 396:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 398:	d9 f7       	brne	.-10     	; 0x390 <main+0x1e6>
							   _delay_ms(100);
							   PORTC=0b11111000;
 39a:	f5 ba       	out	0x15, r15	; 21
 39c:	88 ee       	ldi	r24, 0xE8	; 232
 39e:	93 e0       	ldi	r25, 0x03	; 3
 3a0:	fe 01       	movw	r30, r28
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <main+0x1f8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a8:	d9 f7       	brne	.-10     	; 0x3a0 <main+0x1f6>
							   _delay_ms(100);
							   PORTC=0b11111100;
 3aa:	e5 ba       	out	0x15, r14	; 21
 3ac:	88 ee       	ldi	r24, 0xE8	; 232
 3ae:	93 e0       	ldi	r25, 0x03	; 3
 3b0:	fe 01       	movw	r30, r28
 3b2:	31 97       	sbiw	r30, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <main+0x208>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3b8:	d9 f7       	brne	.-10     	; 0x3b0 <main+0x206>
							   _delay_ms(100);
							   PORTC=0b11111110;
 3ba:	d5 ba       	out	0x15, r13	; 21
 3bc:	88 ee       	ldi	r24, 0xE8	; 232
 3be:	93 e0       	ldi	r25, 0x03	; 3
 3c0:	fe 01       	movw	r30, r28
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x218>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c8:	d9 f7       	brne	.-10     	; 0x3c0 <main+0x216>
							   _delay_ms(100);
							   PORTC=0b11111111;
 3ca:	15 bb       	out	0x15, r17	; 21
 3cc:	88 ee       	ldi	r24, 0xE8	; 232
 3ce:	93 e0       	ldi	r25, 0x03	; 3
 3d0:	fe 01       	movw	r30, r28
 3d2:	31 97       	sbiw	r30, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0x228>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3d8:	d9 f7       	brne	.-10     	; 0x3d0 <main+0x226>
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <main+0x236>
							   _delay_ms(100);
							   }
							   
							   else
							     lcd_clear();
 3dc:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
								 PORTC=0x00;
 3e0:	15 ba       	out	0x15, r1	; 21
								 
						   if((PINA & 0b11111000)==0b11110000) //switch 5 is closed
 3e2:	89 b3       	in	r24, 0x19	; 25
 3e4:	88 7f       	andi	r24, 0xF8	; 248
 3e6:	80 3f       	cpi	r24, 0xF0	; 240
 3e8:	09 f0       	breq	.+2      	; 0x3ec <main+0x242>
 3ea:	54 c0       	rjmp	.+168    	; 0x494 <__stack+0x35>
						     {
							      lcd_command(0x80);
 3ec:	80 e8       	ldi	r24, 0x80	; 128
 3ee:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
								  lcd_string("curtain/on/of");
 3f2:	8d e8       	ldi	r24, 0x8D	; 141
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
								  PORTC=0xff;
 3fa:	15 bb       	out	0x15, r17	; 21
 3fc:	88 ee       	ldi	r24, 0xE8	; 232
 3fe:	93 e0       	ldi	r25, 0x03	; 3
 400:	fe 01       	movw	r30, r28
 402:	31 97       	sbiw	r30, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <main+0x258>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 406:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 408:	d9 f7       	brne	.-10     	; 0x400 <main+0x256>
								  _delay_ms(100);
								  PORTC=0b11100111;
 40a:	05 bb       	out	0x15, r16	; 21
 40c:	88 ee       	ldi	r24, 0xE8	; 232
 40e:	93 e0       	ldi	r25, 0x03	; 3
 410:	fe 01       	movw	r30, r28
 412:	31 97       	sbiw	r30, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <main+0x268>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 416:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 418:	d9 f7       	brne	.-10     	; 0x410 <main+0x266>
								  _delay_ms(100);
								  PORTC=0b11000011;
 41a:	83 ec       	ldi	r24, 0xC3	; 195
 41c:	85 bb       	out	0x15, r24	; 21
 41e:	88 ee       	ldi	r24, 0xE8	; 232
 420:	93 e0       	ldi	r25, 0x03	; 3
 422:	fe 01       	movw	r30, r28
 424:	31 97       	sbiw	r30, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <main+0x27a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 428:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 42a:	d9 f7       	brne	.-10     	; 0x422 <main+0x278>
								  _delay_ms(100);
								  PORTC=0b10000001;
 42c:	81 e8       	ldi	r24, 0x81	; 129
 42e:	85 bb       	out	0x15, r24	; 21
 430:	88 ee       	ldi	r24, 0xE8	; 232
 432:	93 e0       	ldi	r25, 0x03	; 3
 434:	fe 01       	movw	r30, r28
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <main+0x28c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 43a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 43c:	d9 f7       	brne	.-10     	; 0x434 <main+0x28a>
								  _delay_ms(100);
								  PORTC=0x00;
 43e:	15 ba       	out	0x15, r1	; 21
 440:	88 ee       	ldi	r24, 0xE8	; 232
 442:	93 e0       	ldi	r25, 0x03	; 3
 444:	fe 01       	movw	r30, r28
 446:	31 97       	sbiw	r30, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <main+0x29c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 44a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 44c:	d9 f7       	brne	.-10     	; 0x444 <main+0x29a>
								  _delay_ms(100);
								  PORTC=0b10000001;
 44e:	81 e8       	ldi	r24, 0x81	; 129
 450:	85 bb       	out	0x15, r24	; 21
 452:	88 ee       	ldi	r24, 0xE8	; 232
 454:	93 e0       	ldi	r25, 0x03	; 3
 456:	fe 01       	movw	r30, r28
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <main+0x2ae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 45c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 45e:	d9 f7       	brne	.-10     	; 0x456 <main+0x2ac>
								  _delay_ms(100);
								  PORTC=0b11000011;
 460:	83 ec       	ldi	r24, 0xC3	; 195
 462:	85 bb       	out	0x15, r24	; 21
 464:	88 ee       	ldi	r24, 0xE8	; 232
 466:	93 e0       	ldi	r25, 0x03	; 3
 468:	fe 01       	movw	r30, r28
 46a:	31 97       	sbiw	r30, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__stack+0xb>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 46e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 470:	d9 f7       	brne	.-10     	; 0x468 <__stack+0x9>
								  _delay_ms(100);
								  PORTC=0b11100111;
 472:	05 bb       	out	0x15, r16	; 21
 474:	88 ee       	ldi	r24, 0xE8	; 232
 476:	93 e0       	ldi	r25, 0x03	; 3
 478:	fe 01       	movw	r30, r28
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <__stack+0x1b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 47e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 480:	d9 f7       	brne	.-10     	; 0x478 <__stack+0x19>
								  _delay_ms(100);
								  PORTC=0b11111111;
 482:	15 bb       	out	0x15, r17	; 21
 484:	88 ee       	ldi	r24, 0xE8	; 232
 486:	93 e0       	ldi	r25, 0x03	; 3
 488:	fe 01       	movw	r30, r28
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <__stack+0x2b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 48e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 490:	d9 f7       	brne	.-10     	; 0x488 <__stack+0x29>
 492:	02 c0       	rjmp	.+4      	; 0x498 <__stack+0x39>
								  _delay_ms(100);
								  }
								  
								  else
								    lcd_clear();
 494:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
									PORTC=0x00;		     
 498:	15 ba       	out	0x15, r1	; 21
 49a:	c0 ce       	rjmp	.-640    	; 0x21c <main+0x72>

0000049c <__udivmodhi4>:
 49c:	aa 1b       	sub	r26, r26
 49e:	bb 1b       	sub	r27, r27
 4a0:	51 e1       	ldi	r21, 0x11	; 17
 4a2:	07 c0       	rjmp	.+14     	; 0x4b2 <__udivmodhi4_ep>

000004a4 <__udivmodhi4_loop>:
 4a4:	aa 1f       	adc	r26, r26
 4a6:	bb 1f       	adc	r27, r27
 4a8:	a6 17       	cp	r26, r22
 4aa:	b7 07       	cpc	r27, r23
 4ac:	10 f0       	brcs	.+4      	; 0x4b2 <__udivmodhi4_ep>
 4ae:	a6 1b       	sub	r26, r22
 4b0:	b7 0b       	sbc	r27, r23

000004b2 <__udivmodhi4_ep>:
 4b2:	88 1f       	adc	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	5a 95       	dec	r21
 4b8:	a9 f7       	brne	.-22     	; 0x4a4 <__udivmodhi4_loop>
 4ba:	80 95       	com	r24
 4bc:	90 95       	com	r25
 4be:	bc 01       	movw	r22, r24
 4c0:	cd 01       	movw	r24, r26
 4c2:	08 95       	ret

000004c4 <_exit>:
 4c4:	f8 94       	cli

000004c6 <__stop_program>:
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <__stop_program>
